###Saves the current scope as an arbitrarily-named target to be referenced later in the (unbroken) event chain save_event_target_as = <string>
## scopes = none
alias[effect:save_scope_as] = value_set[event_target]


alias[trigger:trigger_if] = {
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:trigger_else_if] = {
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[trigger] = alias_match_left[trigger]
}

alias[trigger:trigger_else] = {
    alias_name[trigger] = alias_match_left[trigger]
}

alias[effect:if] = {
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:else_if] = {
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:else] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[trigger:exists] = scope_field


alias[trigger:custom_tooltip] = {
    text = localisation

    ## cardinality = 1..inf
    alias_name[trigger] = alias_match_left[trigger]
}

alias[effect:custom_tooltip] = {
    text = localisation

    ## cardinality = 1..inf
    alias_name[trigger] = alias_match_left[trigger]
}

alias[effect:hidden_effect] = {
    alias_name[effect] = alias_match_left[effect]
}

alias[effect:random_list] = {
    ## cardinality = 1..inf
    int = {
        trigger = {
            alias_name[trigger] = alias_match_left[trigger]
        }
        alias_name[effect] = alias_match_left[effect]

    }
}

alias[effect:while] = {
    limit = {
        alias_name[trigger] = alias_match_left[trigger]
    }
    alias_name[effect] = alias_match_left[effect]

}